import os
from snakemake.utils import min_version

min_version("7.32.4")

configfile: "config.yml"

### helper functions

def complementary(gen):
    """ Returns the reverse complementary of a DNA sequence
        All IUPAC codes included
    """
    trans_dict = {"A":"T","C":"G","G":"C","T":"A","N":"N","R":"Y","Y":"R","S":"S","W":"W","K":"M","M":"K","B":"V","V":"B","D":"H","H":"D"}
    return "".join([trans_dict[nt] for nt in gen[::-1]])


### create log dirs

logdirs = ["default", "all", "create_manifest", "import_fastq", "fastqc", "cutadapt", "dada2"]

for d in logdirs:
    os.makedirs(os.path.join("logs", d), exist_ok = True)

## create outdir

os.makedirs(os.path.join(config["outdir"], config["proj_name"]), exist_ok = True)

## sample names

SAMPLES = list(set([s[:-len("_RX_001.fastq.gz")] for s in os.listdir(config["raw_data"])]))

## output handling

alloutput = list()
alloutput.append(config["outdir"] + "/" + config["proj_name"] + "/reads_trimmed/trimmed.qza")
alloutput.append(config["outdir"] + "/" + config["proj_name"] + "/reads_trimmed/trimmed.qzv")
alloutput.append(expand(config["outdir"] + "/" + config["proj_name"] + "/fastqc/{sample}_" + config["r1_suf"] + "_001_fastqc.html", sample = SAMPLES))
alloutput.append(expand(config["outdir"] + "/" + config["proj_name"] + "/fastqc/{sample}_" + config["r2_suf"] + "_001_fastqc.html", sample = SAMPLES))
alloutput.append(expand(config["outdir"] + "/" + config["proj_name"] + "/fastqc/{sample}_" + config["r1_suf"] + "_001_fastqc.zip", sample = SAMPLES))
alloutput.append(expand(config["outdir"] + "/" + config["proj_name"] + "/fastqc/{sample}_" + config["r2_suf"] + "_001_fastqc.zip", sample = SAMPLES))

rule all:
    input:
        alloutput

### load rules

include: "rules/create_manifest.smk"
include: "rules/import_fastq.smk"
include: "rules/fastqc.smk"
include: "rules/cutadapt.smk"
# include: "rules/dada2.smk"