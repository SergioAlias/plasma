import os, csv
from snakemake.utils import min_version

min_version("7.32.4")

configfile: "config/config.yml"

### helper functions

def revComplementary(seq):
    """ Returns the reverse complementary of a DNA sequence
        All IUPAC codes included
    """
    trans_dict = {"A":"T","C":"G","G":"C","T":"A",
                  "N":"N","R":"Y","Y":"R","S":"S",
                  "W":"W","K":"M","M":"K","B":"V",
                  "V":"B","D":"H","H":"D"}
    return "".join([trans_dict[nt] for nt in seq[::-1]])

def pathCreator(dir):
    """ Return a lambda function that joins paths with the specified dir
        Useful for not repeating paths all the time in rules
    """
    return lambda *args: os.path.join(dir, *args)

### create log dirs

logdirs = ["default",
          "all",
          "fastqc_before",
          "cutadapt",
          "fastqc_after",
          "multiqc",
          "create_manifest",
          "import_fastq",
          "itsxpress",
          "dada2",
          "group_feature_table",
          "taxonomy",
          "collapse_feature_table",
          "adapt_metadata",
          "diversity"]

for d in logdirs:
    os.makedirs(os.path.join("logs", d), exist_ok = True)

## directory variables and functions

proj_dir = os.path.join(config["outdir"], config["proj_name"])

fastqc_before_dir = pathCreator(os.path.join(proj_dir, "fastqc_before"))
cutadapt_dir = pathCreator(os.path.join(proj_dir, "reads_trimmed"))
cutadapt_logdir = pathCreator(os.path.join(proj_dir, "cutadapt_logs"))
fastqc_after_dir = pathCreator(os.path.join(proj_dir, "fastqc_after"))
multiqc_dir = pathCreator(os.path.join(proj_dir, "multiqc"))
qiime2_dir = pathCreator(os.path.join(proj_dir, "qiime2"))

## conda environment variables

code_dir = os.path.abspath(os.getcwd())
conda_env_dir = os.path.join(code_dir, "workflow", "envs")
conda_qc = os.path.join(conda_env_dir, "qc.yml")
conda_qiime2 = os.path.join(conda_env_dir, "qiime2-amplicon-2024.2-py38-linux-conda.yml")

## create outdir

os.makedirs(proj_dir, exist_ok = True)

## sample names

SAMPLES = list(set([s[:-len("_RX.fastq.gz")] for s in os.listdir(config["raw_data"])]))

## optional itsxpress rule handling

if config["use_itsxpress"] == True:
  dada2_input_seqs_qza = qiime2_dir("itsxpress", "its_seqs.qza")
else:
  dada2_input_seqs_qza = qiime2_dir("reads", "demux.qza")

## feature table variations

with open(config["metadata"], 'r', newline='') as f:
    META_COLS = next(csv.reader(f, delimiter='\t'))[1:]

TO_COLLAPSE = [i + '_' for i in ["ungrouped", *META_COLS]]

TABLES = [i + '_' for i in ["ungrouped", *META_COLS, "ungrouped_sp_collapsed"]] + [i + '_sp_collapsed_' for i in META_COLS]

## metadata files associations

META_FILES = {}

for table in TABLES:
    meta_filename = "metadata.tsv"
    for meta_col in META_COLS:
        if meta_col in table:
            meta_filename = f"metadata_{meta_col}.tsv"
            break
    META_FILES[table] = meta_filename

## output handling

alloutput = list()
alloutput.append(multiqc_dir("multiqc_report.html"))
alloutput.append(expand(qiime2_dir("diversity", "{feat_table}", "{feat_table}rarefaction_curves.qzv"), feat_table = TABLES))

rule all:
    input:
        alloutput

### load rules

include: "rules/fastqc_before.smk"
include: "rules/cutadapt.smk"
include: "rules/fastqc_after.smk"
include: "rules/multiqc.smk"
include: "rules/create_manifest.smk"
include: "rules/import_fastq.smk"
include: "rules/itsxpress.smk"
include: "rules/dada2.smk"
include: "rules/group_feature_table.smk"
include: "rules/taxonomy.smk"
include: "rules/collapse_feature_table.smk"
include: "rules/adapt_metadata.smk"
include: "rules/diversity.smk"